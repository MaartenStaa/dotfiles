// Zed settings
//
// For information on how to configure Zed, see the Zed
// documentation: https://zed.dev/docs/configuring-zed
//
// To see all of Zed's default settings without changing your
// custom settings, run the `open default settings` command
// from the command palette or from `Zed` application menu.
{
  "icon_theme": "Catppuccin Macchiato",
  "base_keymap": "SublimeText",
  "theme": "Catppuccin Macchiato",
  "telemetry": {
    "diagnostics": false,
    "metrics": false
  },
  "terminal": {
    "detect_venv": {
      "on": {
        "activate_script": "fish"
      }
    },
    "shell": {
      "program": "fish"
    }
  },
  "vim_mode": true,
  "vim": {
    "use_system_clipboard": "never"
  },
  "ui_font_size": 16,
  "buffer_font_size": 14,
  "buffer_font_family": "JetBrainsMono Nerd Font Mono",
  "relative_line_numbers": true,
  "git": {
    "inline_blame": {
      "delay_ms": 150,
      "min_column": 100
    }
  },
  "inlay_hints": {
    "enabled": true
  },
  "collaboration_panel": {
    "button": false,
    "dock": "right"
  },
  "project_panel": {
    "dock": "right"
  },
  "languages": {
    "Python": {
      "formatter": [
        {
          "external": {
            "command": "ruff",
            "arguments": [
              "check",
              "--select=I",
              "--fix",
              "--stdin-filename",
              "{buffer_path}"
            ]
          }
        },
        {
          "external": {
            "command": "ruff",
            "arguments": ["format", "--stdin-filename", "{buffer_path}"]
          }
          // "language_server": {
          //   "name": "ruff"
          // }
        }
      ],
      "language_servers": [
        "ruff",
        "basedpyright",
        "pyrefly",
        "!pylsp",
        "!pyright"
      ]
    },
    "Starlark": {
      "formatter": {
        "external": {
          "command": "buildifier",
          "arguments": ["-mode=fix", "-path={buffer_path}"]
        }
      }
    },
    "YAML": {
      "formatter": "language_server"
    }
  },
  "lsp": {
    "basedpyright": {
      "binary": {
        "path": "uvx",
        "arguments": [
          "--from=basedpyright",
          "basedpyright-langserver",
          "--stdio"
        ]
      }
    },
    "json-language-server": {
      "settings": {
        "json": {
          "schemas": [
            {
              "fileMatch": ["pyrightconfig.json"],
              "url": "https://raw.githubusercontent.com/microsoft/pyright/main/packages/vscode-pyright/schemas/pyrightconfig.schema.json"
            }
          ]
        }
      }
    },
    "nil": {
      "settings": {
        "nix": {
          "flake": {
            "autoArchive": true,
            "autoEvalInputs": true
          }
        }
      }
    },
    "pyrefly": {
      "binary": {
        "path": "uvx",
        "arguments": ["pyrefly", "lsp"]
      }
    },
    "starpls": {
      "binary": {
        "path": "/Users/maartens/repos/github/facebookexperimental/starlark-rust/target/release/starlark",
        "arguments": ["--lsp", "--bazel", "--eager"]
      }
    },
    "rust-analyzer": {
      "binary": {
        "path": "/etc/profiles/per-user/maartens/bin/rust-analyzer"
      },
      "initialization_options": {
        "check": {
          "command": "clippy"
        },
        "completion": {
          "snippets": {
            "custom": {
              "Arc::new": {
                "postfix": "arc",
                "body": ["Arc::new(${receiver})"],
                "requires": "std::sync::Arc",
                "scope": "expr"
              },
              "Some": {
                "postfix": "some",
                "body": ["Some(${receiver})"],
                "scope": "expr"
              },
              "Ok": {
                "postfix": "ok",
                "body": ["Ok(${receiver})"],
                "scope": "expr"
              },
              "Rc::new": {
                "postfix": "rc",
                "body": ["Rc::new(${receiver})"],
                "requires": "std::rc::Rc",
                "scope": "expr"
              },
              "Box::pin": {
                "postfix": "boxpin",
                "body": ["Box::pin(${receiver})"],
                "requires": "std::boxed::Box",
                "scope": "expr"
              },
              "vec!": {
                "postfix": "vec",
                "body": ["vec![${receiver}]"],
                "description": "vec![]",
                "scope": "expr"
              }
            }
          }
        }
      }
    },
    "yaml-language-server": {
      "settings": {
        "yaml": {
          "format": {
            "printWidth": 100,
            "singleQuote": false
          },
          "schemas": {
            "/Users/maartens/repos/client/client/tools/sptcli/tasks_schema.json": "tools/sptcli/tasks/**/*.yaml"
          }
        }
      }
    }
  },
  "file_types": {
    "Starlark": ["BUILD", "WORKSPACE", "bazel", "bzl", "star", "starlark"],
    "JSON": ["json", ".swcrc"]
  }
}
